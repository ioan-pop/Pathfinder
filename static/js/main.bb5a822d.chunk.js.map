{"version":3,"sources":["Components/Wrapper/Wrapper.module.css","Components/Square/Square.js","Components/Grid/Grid.js","Components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js","Components/Square/Square.module.css","Components/Grid/Grid.module.css"],"names":["module","exports","getClassName","square","additionalStyles","startSquare","styles","StartSquare","endSquare","EndSquare","wallSquare","WallSquare","pathSquare","PathSquare","searchedSquare","SearchedSquare","Square","props","onClick","clicked","onMouseEnter","mouseEnter","className","column","style","height","squareHeight","width","squareWidth","showNumbers","SquareNumbers","x","y","grid","state","searchAlgorithm","mouseDown","searchStack","searchInterval","undefined","searchDirection","algorithmFunctions","searchNextSquare","breadthFirstSearchNextSquare","bind","i","row","j","columns","push","setState","prevState","this","rows","$","mousedown","mouseup","currentGrid","setInterval","clearInterval","searchedFrom","squareToCheck","currentSquare","checkNextIf","endFound","searchSquare","topSquare","breadthFirstCheckSquareAvailable","length","rightSquare","bottomSquare","leftSquare","splice","buildFastestPath","topSearchable","rightSearchable","bottomSearchable","leftSearchable","noSearchableSquares","pullFromBottomOfStack","adjacentSquares","getAdjacentSquares","hitWallSquare","hitSearchedSquare","depthFirstSearchNextSquare","path","endPath","markSquareForPath","event","currentTarget","checked","_","camelCase","target","value","console","log","map","index","key","Row","selectSquare","Fragment","Menu","InnerMenu","type","onChange","numbersToggleHandler","searchAlgorithmChange","display","disabled","startSearch","stopSearch","id","Grid","Component","wrapper","showModal","localStorage","getItem","calculatedCells","calculateCells","window","resize","wWidth","wHeight","ratio","Math","floor","is","setItem","modal","InstructionsModalWrapper","InstructionsModal","marginBottom","fontSize","marginTop","color","instructionsConfirmHandler","App","Wrapper","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb5a822d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"InstructionsModalWrapper\":\"Wrapper_InstructionsModalWrapper__G6jgf\",\"InstructionsModal\":\"Wrapper_InstructionsModal__3Hzzo\"};","import React from 'react';\nimport styles from './Square.module.css';\n\nlet getClassName = (square) => {\n    let additionalStyles = '';\n\n    if (square.startSquare) {\n        additionalStyles = ' ' + styles.StartSquare;\n    } else if (square.endSquare) {\n        additionalStyles = ' ' + styles.EndSquare;\n    } else if (square.wallSquare) {\n        additionalStyles = ' ' + styles.WallSquare;\n    } else if (square.pathSquare) {\n        additionalStyles = ' ' + styles.PathSquare;\n    } else if (square.searchedSquare) {\n        additionalStyles = ' ' + styles.SearchedSquare;\n    }\n\n    return styles.Square + additionalStyles;\n};\n\nconst square = (props) => (\n    <span \n        onClick={props.clicked}\n        onMouseEnter={props.mouseEnter}\n        className={getClassName(props.column)} \n        style={{height: props.squareHeight + \"px\", width: props.squareWidth + \"px\"}}>\n        {\n            props.showNumbers ?\n            <span\n                className={styles.SquareNumbers}>\n                {props.column.x}, {props.column.y}\n            </span> :\n            null\n        }\n    </span>\n);\n\nexport default square;","import React, {Component} from 'react';\nimport styles from './Grid.module.css';\nimport Square from '../Square/Square';\nimport _ from 'lodash';\nimport $ from 'jquery';\n\nclass grid extends Component {\n    state = {\n        showNumbers: false,\n        searchAlgorithm: 'breadthFirst',\n        grid: [],\n        startSquare: null,\n        endSquare: null,\n        mouseDown: false\n    };\n\n    // Class variables\n    searchStack = [];\n    searchInterval = undefined;\n    searchDirection = undefined;\n\n    algorithmFunctions = {\n        searchNextSquare: this.breadthFirstSearchNextSquare.bind(this)\n    };\n\n    componentDidMount() {\n        for(let i = 0; i < this.props.rows; i++) {\n            let row = [];\n\n            for(let j = 0; j < this.props.columns; j++) {\n                row.push({x: j, y: i});\n            }\n\n            this.setState(prevState => ({\n                grid: [...prevState.grid, row]\n            }));\n        }\n\n        $('#grid').mousedown(() => {\n            this.setState({mouseDown: true});\n        });\n\n        $('#grid').mouseup(() => {\n            this.setState({mouseDown: false});\n        });\n    }\n\n    selectSquare(square) {\n        let currentGrid = [...this.state.grid];\n\n        if(!this.state.startSquare) {\n            currentGrid[square.y][square.x].startSquare = true;\n            currentGrid[square.y][square.x].searchedSquare = true;\n            this.setState({startSquare: square});\n        } else if (!this.state.endSquare) {\n            currentGrid[square.y][square.x].endSquare = true;\n            this.setState({endSquare: square});\n        } else {\n            currentGrid[square.y][square.x].wallSquare = true;\n        }\n\n        this.setState({grid: currentGrid});\n    }\n\n    startSearch() {\n        this.searchStack.push({x: this.state.startSquare.x, y: this.state.startSquare.y});\n        \n        this.searchInterval = setInterval(() => {\n            this.algorithmFunctions.searchNextSquare();\n        }, 10);\n    }\n\n    stopSearch() {\n        clearInterval(this.searchInterval);\n    }\n\n    // Returns booleans of: end found, wall square, searched square, out of bounds bound\n    searchSquare(x, y, searchedFrom) {\n        if(this.state.endSquare.x === x && this.state.endSquare.y === y) {\n            this.setState({endSquare: {...this.state.endSquare, searchedFrom}});\n            return [true];\n        } else if (this.state.grid[y][x].searchedSquare || this.state.grid[y][x].startSquare || this.state.grid[y][x].wallSquare) {\n            if (this.state.grid[y][x].wallSquare) {\n                return [false, true];\n            } else if (this.state.grid[y][x].searchedSquare) {\n                return [false, false, true];\n            } else {\n                return [false];\n            }\n        } else {\n            let currentGrid = [...this.state.grid];\n            \n            currentGrid[y][x].searchedSquare = true;\n            currentGrid[y][x].searchedFrom = searchedFrom;\n            \n            this.searchStack.push({x, y});\n\n            this.setState({grid: currentGrid});\n    \n            return [false];\n        }\n    }\n\n    breadthFirstCheckSquareAvailable(squareToCheck, currentSquare) {\n        let checkNextIf = true;\n        let endFound = false;\n\n        if (!squareToCheck.searchedSquare && !squareToCheck.wallSquare) {\n            checkNextIf = false;\n            [endFound] = this.searchSquare(squareToCheck.x, squareToCheck.y, currentSquare);\n        }\n\n        return [checkNextIf, endFound];\n    }\n\n    breadthFirstSearchNextSquare() {\n        let currentSquare = this.state.grid[this.searchStack[0].y][this.searchStack[0].x];\n        let checkNextIf = true;\n        let endFound = false;\n        \n        if (currentSquare.y > 0) {\n            let topSquare = this.state.grid[currentSquare.y - 1][currentSquare.x];\n            [checkNextIf, endFound] = this.breadthFirstCheckSquareAvailable(topSquare, currentSquare);\n        }\n        \n        if (checkNextIf && (currentSquare.x < this.state.grid[0].length - 1)) {\n            let rightSquare = this.state.grid[currentSquare.y][currentSquare.x + 1];\n            [checkNextIf, endFound] = this.breadthFirstCheckSquareAvailable(rightSquare, currentSquare);\n        }\n        \n        if (checkNextIf && (currentSquare.y < this.state.grid.length - 1)) {\n            let bottomSquare = this.state.grid[currentSquare.y + 1][currentSquare.x];\n            [checkNextIf, endFound] = this.breadthFirstCheckSquareAvailable(bottomSquare, currentSquare);\n        }\n        \n        if (checkNextIf && (currentSquare.x > 0)) {\n            let leftSquare = this.state.grid[currentSquare.y][currentSquare.x - 1];\n            [checkNextIf, endFound] = this.breadthFirstCheckSquareAvailable(leftSquare, currentSquare);\n        }\n        \n        if (checkNextIf) {\n            this.searchStack.splice(0,1);\n            endFound = false;\n            this.algorithmFunctions.searchNextSquare();\n        }\n\n        if (endFound) {\n            clearInterval(this.searchInterval);\n            this.buildFastestPath();\n        }\n    }\n\n    getAdjacentSquares(x, y) {\n        let currentSquare = this.state.grid[y][x];\n\n        let topSquare = undefined;\n        let rightSquare = undefined;\n        let bottomSquare = undefined;\n        let leftSquare = undefined;\n\n        let topSearchable = true;\n        let rightSearchable = true;\n        let bottomSearchable = true;\n        let leftSearchable = true;\n\n        if (currentSquare.y > 0) {\n            topSquare = this.state.grid[y - 1][x];\n            if (topSquare.wallSquare || topSquare.searchedSquare) {\n                topSearchable = false;\n            }\n        } else {\n            topSearchable = false;\n        }\n        if (currentSquare.x < this.state.grid[0].length - 1) {\n            rightSquare = this.state.grid[y][x + 1];\n            if (rightSquare.wallSquare || rightSquare.searchedSquare) {\n                rightSearchable = false;\n            }\n        } else {\n            rightSearchable = false;\n        }\n        if (currentSquare.y < this.state.grid.length - 1) {\n            bottomSquare = this.state.grid[y + 1][x];\n            if (bottomSquare.wallSquare || bottomSquare.searchedSquare) {\n                bottomSearchable = false;\n            }\n        } else {\n            bottomSearchable = false;\n        }\n        if (currentSquare.x > 0) {\n            leftSquare = this.state.grid[y][x - 1];\n            if (leftSquare.wallSquare || leftSquare.searchedSquare) {\n                leftSearchable = false;\n            }\n        } else {\n            leftSearchable = false;\n        }\n\n        return {\n            topSquare, rightSquare, bottomSquare, leftSquare, topSearchable, rightSearchable, bottomSearchable, leftSearchable,\n            noSearchableSquares: (!topSearchable && !rightSearchable && !bottomSearchable && !leftSearchable)\n        };\n    }\n\n    depthFirstSearchNextSquare(pullFromBottomOfStack) {\n        let currentSquare = pullFromBottomOfStack ? \n            this.state.grid[this.searchStack[0].y][this.searchStack[0].x] : \n            this.state.grid[this.searchStack[this.searchStack.length - 1].y][this.searchStack[this.searchStack.length - 1].x];\n\n        let adjacentSquares = this.getAdjacentSquares(currentSquare.x, currentSquare.y);\n        let endFound = false;\n        let hitWallSquare = false;\n        let hitSearchedSquare = false;\n\n        \n        if (adjacentSquares.noSearchableSquares) {\n            if(this.searchStack[0].x === currentSquare.x && this.searchStack[0].y === currentSquare.y) {\n                this.searchStack.splice(0,1);\n            }\n            this.searchDirection = undefined;\n            this.depthFirstSearchNextSquare(true);\n            return;\n        }\n\n        if (\n            ((currentSquare.y <= 0) && (this.searchDirection === 'top')) || \n            ((currentSquare.x <= 0) && (this.searchDirection === 'left')) || \n            ((currentSquare.y >= this.state.grid.length - 1) && (this.searchDirection === 'bottom')) || \n            ((currentSquare.x >= this.state.grid[0].length - 1) && (this.searchDirection === 'right'))\n        ) {\n            this.searchDirection = undefined;\n            this.depthFirstSearchNextSquare(true);\n            return;\n        }\n\n        if(!this.searchDirection) {\n            if(adjacentSquares.topSearchable) {\n                this.searchDirection = 'top';\n            } else if (adjacentSquares.rightSearchable) {\n                this.searchDirection = 'right';\n            } else if (adjacentSquares.bottomSearchable) {\n                this.searchDirection = 'bottom';\n            } else if (adjacentSquares.leftSearchable) {\n                this.searchDirection = 'left';\n            }\n        }\n\n        if (this.searchDirection === 'top') {\n            [endFound, hitWallSquare, hitSearchedSquare] = this.searchSquare(currentSquare.x, currentSquare.y - 1, currentSquare);\n        } else if (this.searchDirection === 'right') {\n            [endFound, hitWallSquare, hitSearchedSquare] = this.searchSquare(currentSquare.x + 1, currentSquare.y, currentSquare);            \n        } else if (this.searchDirection === 'bottom') {\n            [endFound, hitWallSquare, hitSearchedSquare] = this.searchSquare(currentSquare.x, currentSquare.y + 1, currentSquare);            \n        } else if (this.searchDirection === 'left') {\n            [endFound, hitWallSquare, hitSearchedSquare] = this.searchSquare(currentSquare.x - 1, currentSquare.y, currentSquare);            \n        }\n\n        if(hitWallSquare || hitSearchedSquare) {\n            this.searchDirection = undefined;\n            this.depthFirstSearchNextSquare(true);\n            return;\n        }\n\n        if (endFound) {\n            clearInterval(this.searchInterval);\n            this.buildFastestPath();\n        }\n    }\n\n    buildFastestPath() {\n        let path = [];\n        let endPath = false;\n\n        let searchedFrom = this.state.endSquare.searchedFrom;\n\n        while(!endPath) {\n            path.push(searchedFrom);\n            if(searchedFrom.searchedFrom === undefined) {\n                endPath = true;\n            } else {\n                searchedFrom = searchedFrom.searchedFrom;\n            }\n        }\n\n        for(let i = 0; i < path.length; i++) {\n            this.markSquareForPath(path[i].x, path[i].y);\n        }\n    }\n\n    markSquareForPath(x, y) {\n        let currentGrid = [...this.state.grid];\n        \n        currentGrid[y][x].pathSquare = true;\n\n        this.setState({grid: currentGrid});\n    }\n\n    numbersToggleHandler(event) {\n        this.setState({showNumbers: event.currentTarget.checked});\n    }\n\n    searchAlgorithmChange(event) {\n        switch (_.camelCase(event.target.value)) {\n            case 'breadthFirst':\n                this.algorithmFunctions.searchNextSquare = this.breadthFirstSearchNextSquare.bind(this);\n                break;\n            case 'depthFirst':\n                this.algorithmFunctions.searchNextSquare = this.depthFirstSearchNextSquare.bind(this);\n                break;\n            default:\n                console.log('Error: No algorithm selected');\n                break;\n        };\n    }\n\n    render() {\n        let grid = this.state.grid.map((row, index) => {\n            return (\n                <div key={index} className={styles.Row}>\n                    {\n                        row.map((column, index) => {\n                            return (\n                                <Square \n                                    key={index}\n                                    column={column}\n                                    clicked={() => {this.selectSquare(column)}}\n                                    mouseEnter={() => this.state.mouseDown ? this.selectSquare(column) : null}\n                                    squareHeight={this.props.squareHeight}\n                                    squareWidth={this.props.squareWidth}\n                                    showNumbers={this.state.showNumbers} />\n                            );\n                        })\n                    }\n                </div>\n            );\n        });\n\n        return(\n            <React.Fragment>\n                <div className={styles.Menu}>\n                    <div className={styles.InnerMenu}>\n                        <div>\n                            Numbers\n                            <input type=\"checkbox\" onChange={this.numbersToggleHandler.bind(this)}/>\n                        </div>\n                        <div>\n                            <div>Algorithm</div>\n                            <div>\n                                <select onChange={this.searchAlgorithmChange.bind(this)}>\n                                    <option>Breadth First</option>\n                                    <option>Depth First</option>\n                                </select>\n                            </div>\n                        </div>\n                        <div style={{display: 'inline-grid'}}>\n                            <button \n                                disabled={!this.state.startSquare || !this.state.endSquare} \n                                onClick={() => {this.startSearch()}}>\n                                Start\n                            </button>\n                            <button onClick={() => {this.stopSearch()}}>\n                                Stop\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div id=\"grid\" className={styles.Grid}>\n                    {grid}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default grid;","import React, { Component } from 'react';\nimport Grid from '../Grid/Grid';\nimport $ from 'jquery';\nimport styles from './Wrapper.module.css'\n\nclass wrapper extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showModal: !localStorage.getItem('skipInstructions'),\n            calculatedCells: false\n        }\n    }\n\n    componentDidMount() {\n        this.calculateCells();\n\n        $(window).resize(() => {\n            this.setState({calculatedCells: false});\n            this.calculateCells();\n        });\n    }\n\n    calculateCells() {\n        let rows = 0;\n        let columns = 0;\n        let wWidth = $(window).width();\n        let wHeight = $(window).height();\n        let ratio = wWidth/wHeight;\n\n        if (wWidth > 2000) {\n            columns = 40;\n        } else if (wWidth > 1000) {\n            columns = 25;\n        } else {\n            columns = 10;\n        }\n\n        rows = Math.floor(columns / ratio);\n\n        this.setState({\n            calculatedCells: true,\n            rows,\n            columns,\n            squareWidth: wWidth / columns,\n            squareHeight: (wHeight / rows)\n        });\n    }\n\n    instructionsConfirmHandler() {\n        if ($('#dontShowCheckbox').is(':checked')) {\n            localStorage.setItem('skipInstructions', true);\n        }\n\n        this.setState({showModal: false});\n    }\n\n    render() {\n        let modal = this.state.showModal ? (\n            <div className={styles.InstructionsModalWrapper}>\n                <div className={styles.InstructionsModal}>\n                    <div style={{marginBottom: '15px', fontSize: '24px'}}>Instructions</div>\n                    <div>1. Click anywhere on the grid to create a starting position</div>\n                    <div>2. Click anywhere on the grid to create a ending position</div>\n                    <div>3. Optionally click (or drag) any additional squares to create wall squares</div>\n                    <div>4. Select algorith on the menu on the right</div>\n                    <div>5. Click start to begin the search</div>\n                    <div style={{marginTop: '15px', fontSize: '14px', color: '#333'}}>\n                        <input type=\"checkbox\" id=\"dontShowCheckbox\"/>Don't show this again\n                    </div>\n                    <button style={{marginTop: '15px'}} onClick={this.instructionsConfirmHandler.bind(this)}>Okay</button>\n                </div>\n            </div>\n        ) : null;\n\n        return(\n            <div>\n                { modal }\n                {\n                    this.state.calculatedCells ?\n                    (<Grid rows={this.state.rows} columns={this.state.columns} squareWidth={this.state.squareWidth} squareHeight={this.state.squareHeight}/>) :\n                    <div>Calculating best size</div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default wrapper;\n","import React from 'react';\nimport './App.css';\nimport Wrapper from './Components/Wrapper/Wrapper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Square\":\"Square_Square__3PWzo\",\"SquareNumbers\":\"Square_SquareNumbers__3hlXO\",\"StartSquare\":\"Square_StartSquare__2e4Ay\",\"EndSquare\":\"Square_EndSquare__1v8y5\",\"WallSquare\":\"Square_WallSquare__BT3Et\",\"SearchedSquare\":\"Square_SearchedSquare__1lM8d\",\"PathSquare\":\"Square_PathSquare__28Whz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Menu\":\"Grid_Menu__17n1H\",\"InnerMenu\":\"Grid_InnerMenu__2-G4s\",\"Grid\":\"Grid_Grid__3T6sz\",\"Row\":\"Grid_Row__1emuE\"};"],"sourceRoot":""}