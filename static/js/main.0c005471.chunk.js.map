{"version":3,"sources":["Components/Grid/Grid.module.css","Components/Wrapper/Wrapper.module.css","Components/Grid/Grid.js","Components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","grid","state","showNumbers","searchAlgorithm","startSquare","endSquare","mouseDown","searchStack","searchInterval","undefined","searchDirection","algorithmFunctions","searchNextSquare","breadthFirstSearchNextSquare","bind","i","row","j","props","columns","push","x","y","setState","prevState","this","rows","$","mousedown","mouseup","square","currentGrid","wallSquare","searchedSquare","additionalStyles","styles","StartSquare","EndSquare","WallSquare","pathSquare","PathSquare","SearchedSquare","Square","setInterval","clearInterval","searchedFrom","squareToCheck","currentSquare","checkNextIf","endFound","searchSquare","topSquare","breadthFirstCheckSquareAvailable","length","rightSquare","bottomSquare","leftSquare","splice","buildFastestPath","topSearchable","rightSearchable","bottomSearchable","leftSearchable","noSearchableSquares","pullFromBottomOfStack","adjacentSquares","getAdjacentSquares","hitWallSquare","hitSearchedSquare","depthFirstSearchNextSquare","path","endPath","markSquareForPath","event","currentTarget","checked","_","camelCase","target","value","console","log","map","index","key","className","Row","column","getClassName","onClick","selectSquare","onMouseEnter","style","height","squareHeight","width","squareWidth","SquareNumbers","Fragment","Menu","InnerMenu","type","onChange","numbersToggleHandler","searchAlgorithmChange","display","disabled","startSearch","stopSearch","id","Grid","Component","wrapper","showModal","localStorage","getItem","calculatedCells","calculateCells","window","resize","wWidth","wHeight","ratio","Math","floor","is","setItem","modal","InstructionsModalWrapper","InstructionsModal","marginBottom","fontSize","marginTop","color","instructionsConfirmHandler","App","Wrapper","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0c005471.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Menu\":\"Grid_Menu__17n1H\",\"InnerMenu\":\"Grid_InnerMenu__2-G4s\",\"Grid\":\"Grid_Grid__3T6sz\",\"Row\":\"Grid_Row__1emuE\",\"Square\":\"Grid_Square__3p_Gc\",\"SquareNumbers\":\"Grid_SquareNumbers__jp6mB\",\"StartSquare\":\"Grid_StartSquare__3uz-B\",\"EndSquare\":\"Grid_EndSquare__3ek2-\",\"WallSquare\":\"Grid_WallSquare__2iAa0\",\"SearchedSquare\":\"Grid_SearchedSquare__1_OxM\",\"PathSquare\":\"Grid_PathSquare__3t6mS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InstructionsModalWrapper\":\"Wrapper_InstructionsModalWrapper__G6jgf\",\"InstructionsModal\":\"Wrapper_InstructionsModal__3Hzzo\"};","import React, {Component} from 'react';\nimport styles from './Grid.module.css';\nimport _ from 'lodash';\nimport $ from 'jquery';\n\nclass grid extends Component {\n    state = {\n        showNumbers: false,\n        searchAlgorithm: 'breadthFirst',\n        grid: [],\n        startSquare: null,\n        endSquare: null,\n        mouseDown: false\n    };\n\n    // Class variables\n    searchStack = [];\n    searchInterval = undefined;\n    searchDirection = undefined;\n\n    algorithmFunctions = {\n        searchNextSquare: this.breadthFirstSearchNextSquare.bind(this)\n    };\n\n    componentDidMount() {\n        for(let i = 0; i < this.props.rows; i++) {\n            let row = [];\n\n            for(let j = 0; j < this.props.columns; j++) {\n                row.push({x: j, y: i});\n            }\n\n            this.setState(prevState => ({\n                grid: [...prevState.grid, row]\n            }));\n        }\n\n        $('#grid').mousedown(() => {\n            this.setState({mouseDown: true});\n        });\n\n        $('#grid').mouseup(() => {\n            this.setState({mouseDown: false});\n        });\n    }\n\n    selectSquare(square) {\n        let currentGrid = [...this.state.grid];\n\n        if(!this.state.startSquare) {\n            currentGrid[square.y][square.x].startSquare = true;\n            currentGrid[square.y][square.x].searchedSquare = true;\n            this.setState({startSquare: square});\n        } else if (!this.state.endSquare) {\n            currentGrid[square.y][square.x].endSquare = true;\n            this.setState({endSquare: square});\n        } else {\n            currentGrid[square.y][square.x].wallSquare = true;\n        }\n\n        this.setState({grid: currentGrid});\n    }\n\n    getClassName(square) {\n        let additionalStyles = '';\n\n        if (square.startSquare) {\n            additionalStyles = ' ' + styles.StartSquare;\n        } else if (square.endSquare) {\n            additionalStyles = ' ' + styles.EndSquare;\n        } else if (square.wallSquare) {\n            additionalStyles = ' ' + styles.WallSquare;\n        } else if (square.pathSquare) {\n            additionalStyles = ' ' + styles.PathSquare;\n        } else if (square.searchedSquare) {\n            additionalStyles = ' ' + styles.SearchedSquare;\n        }\n\n        return styles.Square + additionalStyles;\n    }\n\n    startSearch() {\n        this.searchStack.push({x: this.state.startSquare.x, y: this.state.startSquare.y});\n        \n        this.searchInterval = setInterval(() => {\n            this.algorithmFunctions.searchNextSquare();\n        }, 10);\n    }\n\n    stopSearch() {\n        clearInterval(this.searchInterval);\n    }\n\n    // Returns booleans of: end found, wall square, searched square, out of bounds bound\n    searchSquare(x, y, searchedFrom) {\n        if(this.state.endSquare.x === x && this.state.endSquare.y === y) {\n            this.setState({endSquare: {...this.state.endSquare, searchedFrom}});\n            return [true];\n        } else if (this.state.grid[y][x].searchedSquare || this.state.grid[y][x].startSquare || this.state.grid[y][x].wallSquare) {\n            if (this.state.grid[y][x].wallSquare) {\n                return [false, true];\n            } else if (this.state.grid[y][x].searchedSquare) {\n                return [false, false, true];\n            } else {\n                return [false];\n            }\n        } else {\n            let currentGrid = [...this.state.grid];\n            \n            currentGrid[y][x].searchedSquare = true;\n            currentGrid[y][x].searchedFrom = searchedFrom;\n            \n            this.searchStack.push({x, y});\n\n            this.setState({grid: currentGrid});\n    \n            return [false];\n        }\n    }\n\n    breadthFirstCheckSquareAvailable(squareToCheck, currentSquare) {\n        let checkNextIf = true;\n        let endFound = false;\n\n        if (!squareToCheck.searchedSquare && !squareToCheck.wallSquare) {\n            checkNextIf = false;\n            [endFound] = this.searchSquare(squareToCheck.x, squareToCheck.y, currentSquare);\n        }\n\n        return [checkNextIf, endFound];\n    }\n\n    breadthFirstSearchNextSquare() {\n        let currentSquare = this.state.grid[this.searchStack[0].y][this.searchStack[0].x];\n        let checkNextIf = true;\n        let endFound = false;\n        \n        if (currentSquare.y > 0) {\n            let topSquare = this.state.grid[currentSquare.y - 1][currentSquare.x];\n            [checkNextIf, endFound] = this.breadthFirstCheckSquareAvailable(topSquare, currentSquare);\n        }\n        \n        if (checkNextIf && (currentSquare.x < this.state.grid[0].length - 1)) {\n            let rightSquare = this.state.grid[currentSquare.y][currentSquare.x + 1];\n            [checkNextIf, endFound] = this.breadthFirstCheckSquareAvailable(rightSquare, currentSquare);\n        }\n        \n        if (checkNextIf && (currentSquare.y < this.state.grid.length - 1)) {\n            let bottomSquare = this.state.grid[currentSquare.y + 1][currentSquare.x];\n            [checkNextIf, endFound] = this.breadthFirstCheckSquareAvailable(bottomSquare, currentSquare);\n        }\n        \n        if (checkNextIf && (currentSquare.x > 0)) {\n            let leftSquare = this.state.grid[currentSquare.y][currentSquare.x - 1];\n            [checkNextIf, endFound] = this.breadthFirstCheckSquareAvailable(leftSquare, currentSquare);\n        }\n        \n        if (checkNextIf) {\n            this.searchStack.splice(0,1);\n            endFound = false;\n            this.algorithmFunctions.searchNextSquare();\n        }\n\n        if (endFound) {\n            clearInterval(this.searchInterval);\n            this.buildFastestPath();\n        }\n    }\n\n    getAdjacentSquares(x, y) {\n        let currentSquare = this.state.grid[y][x];\n\n        let topSquare = undefined;\n        let rightSquare = undefined;\n        let bottomSquare = undefined;\n        let leftSquare = undefined;\n\n        let topSearchable = true;\n        let rightSearchable = true;\n        let bottomSearchable = true;\n        let leftSearchable = true;\n\n        if (currentSquare.y > 0) {\n            topSquare = this.state.grid[y - 1][x];\n            if (topSquare.wallSquare || topSquare.searchedSquare) {\n                topSearchable = false;\n            }\n        } else {\n            topSearchable = false;\n        }\n        if (currentSquare.x < this.state.grid[0].length - 1) {\n            rightSquare = this.state.grid[y][x + 1];\n            if (rightSquare.wallSquare || rightSquare.searchedSquare) {\n                rightSearchable = false;\n            }\n        } else {\n            rightSearchable = false;\n        }\n        if (currentSquare.y < this.state.grid.length - 1) {\n            bottomSquare = this.state.grid[y + 1][x];\n            if (bottomSquare.wallSquare || bottomSquare.searchedSquare) {\n                bottomSearchable = false;\n            }\n        } else {\n            bottomSearchable = false;\n        }\n        if (currentSquare.x > 0) {\n            leftSquare = this.state.grid[y][x - 1];\n            if (leftSquare.wallSquare || leftSquare.searchedSquare) {\n                leftSearchable = false;\n            }\n        } else {\n            leftSearchable = false;\n        }\n\n        return {\n            topSquare, rightSquare, bottomSquare, leftSquare, topSearchable, rightSearchable, bottomSearchable, leftSearchable,\n            noSearchableSquares: (!topSearchable && !rightSearchable && !bottomSearchable && !leftSearchable)\n        };\n    }\n\n    depthFirstSearchNextSquare(pullFromBottomOfStack) {\n        let currentSquare = pullFromBottomOfStack ? \n            this.state.grid[this.searchStack[0].y][this.searchStack[0].x] : \n            this.state.grid[this.searchStack[this.searchStack.length - 1].y][this.searchStack[this.searchStack.length - 1].x];\n\n        let adjacentSquares = this.getAdjacentSquares(currentSquare.x, currentSquare.y);\n        let endFound = false;\n        let hitWallSquare = false;\n        let hitSearchedSquare = false;\n\n        \n        if (adjacentSquares.noSearchableSquares) {\n            if(this.searchStack[0].x === currentSquare.x && this.searchStack[0].y === currentSquare.y) {\n                this.searchStack.splice(0,1);\n            }\n            this.searchDirection = undefined;\n            this.depthFirstSearchNextSquare(true);\n            return;\n        }\n\n        if (\n            ((currentSquare.y <= 0) && (this.searchDirection === 'top')) || \n            ((currentSquare.x <= 0) && (this.searchDirection === 'left')) || \n            ((currentSquare.y >= this.state.grid.length - 1) && (this.searchDirection === 'bottom')) || \n            ((currentSquare.x >= this.state.grid[0].length - 1) && (this.searchDirection === 'right'))\n        ) {\n            this.searchDirection = undefined;\n            this.depthFirstSearchNextSquare(true);\n            return;\n        }\n\n        if(!this.searchDirection) {\n            if(adjacentSquares.topSearchable) {\n                this.searchDirection = 'top';\n            } else if (adjacentSquares.rightSearchable) {\n                this.searchDirection = 'right';\n            } else if (adjacentSquares.bottomSearchable) {\n                this.searchDirection = 'bottom';\n            } else if (adjacentSquares.leftSearchable) {\n                this.searchDirection = 'left';\n            }\n        }\n\n        if (this.searchDirection === 'top') {\n            [endFound, hitWallSquare, hitSearchedSquare] = this.searchSquare(currentSquare.x, currentSquare.y - 1, currentSquare);\n        } else if (this.searchDirection === 'right') {\n            [endFound, hitWallSquare, hitSearchedSquare] = this.searchSquare(currentSquare.x + 1, currentSquare.y, currentSquare);            \n        } else if (this.searchDirection === 'bottom') {\n            [endFound, hitWallSquare, hitSearchedSquare] = this.searchSquare(currentSquare.x, currentSquare.y + 1, currentSquare);            \n        } else if (this.searchDirection === 'left') {\n            [endFound, hitWallSquare, hitSearchedSquare] = this.searchSquare(currentSquare.x - 1, currentSquare.y, currentSquare);            \n        }\n\n        if(hitWallSquare || hitSearchedSquare) {\n            this.searchDirection = undefined;\n            this.depthFirstSearchNextSquare(true);\n            return;\n        }\n\n        if (endFound) {\n            clearInterval(this.searchInterval);\n            this.buildFastestPath();\n        }\n    }\n\n    buildFastestPath() {\n        let path = [];\n        let endPath = false;\n\n        let searchedFrom = this.state.endSquare.searchedFrom;\n\n        while(!endPath) {\n            path.push(searchedFrom);\n            if(searchedFrom.searchedFrom === undefined) {\n                endPath = true;\n            } else {\n                searchedFrom = searchedFrom.searchedFrom;\n            }\n        }\n\n        for(let i = 0; i < path.length; i++) {\n            this.markSquareForPath(path[i].x, path[i].y);\n        }\n    }\n\n    markSquareForPath(x, y) {\n        let currentGrid = [...this.state.grid];\n        \n        currentGrid[y][x].pathSquare = true;\n\n        this.setState({grid: currentGrid});\n    }\n\n    numbersToggleHandler(event) {\n        this.setState({showNumbers: event.currentTarget.checked});\n    }\n\n    searchAlgorithmChange(event) {\n        switch (_.camelCase(event.target.value)) {\n            case 'breadthFirst':\n                this.algorithmFunctions.searchNextSquare = this.breadthFirstSearchNextSquare.bind(this);\n                break;\n            case 'depthFirst':\n                this.algorithmFunctions.searchNextSquare = this.depthFirstSearchNextSquare.bind(this);\n                break;\n            default:\n                console.log('Error: No algorithm selected');\n                break;\n        };\n    }\n\n    render() {\n        let grid = this.state.grid.map((row, index) => {\n            return (\n                <div key={index} className={styles.Row}>\n                    {\n                        row.map((column, index) => {\n                            return (\n                                <span \n                                    key={index} \n                                    className={this.getClassName(column)} \n                                    onClick={() => {this.selectSquare(column)}}\n                                    onMouseEnter={() => this.state.mouseDown ? this.selectSquare(column) : null}\n                                    style={{height: this.props.squareHeight + \"px\", width: this.props.squareWidth + \"px\"}}>\n                                    {\n                                        this.state.showNumbers ?\n                                        <span\n                                            className={styles.SquareNumbers}>\n                                            {column.x}, {column.y}\n                                        </span> :\n                                        null\n                                    }\n                                </span>\n                            );\n                        })\n                    }\n                </div>\n            );\n        });\n\n        return(\n            <React.Fragment>\n                <div className={styles.Menu}>\n                    <div className={styles.InnerMenu}>\n                        <div>\n                            Numbers\n                            <input type=\"checkbox\" onChange={this.numbersToggleHandler.bind(this)}/>\n                        </div>\n                        <div>\n                            <div>Algorithm</div>\n                            <div>\n                                <select onChange={this.searchAlgorithmChange.bind(this)}>\n                                    <option>Breadth First</option>\n                                    <option>Depth First</option>\n                                </select>\n                            </div>\n                        </div>\n                        <div style={{display: 'inline-grid'}}>\n                            <button \n                                disabled={!this.state.startSquare || !this.state.endSquare} \n                                onClick={() => {this.startSearch()}}>\n                                Start\n                            </button>\n                            <button onClick={() => {this.stopSearch()}}>\n                                Stop\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div id=\"grid\" className={styles.Grid}>\n                    {grid}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default grid;","import React, { Component } from 'react';\nimport Grid from '../Grid/Grid';\nimport $ from 'jquery';\nimport styles from './Wrapper.module.css'\n\nclass wrapper extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showModal: !localStorage.getItem('skipInstructions'),\n            calculatedCells: false\n        }\n    }\n\n    componentDidMount() {\n        this.calculateCells();\n\n        $(window).resize(() => {\n            this.setState({calculatedCells: false});\n            this.calculateCells();\n        });\n    }\n\n    calculateCells() {\n        let rows = 0;\n        let columns = 0;\n        let wWidth = $(window).width();\n        let wHeight = $(window).height();\n        let ratio = wWidth/wHeight;\n\n        if (wWidth > 2000) {\n            columns = 40;\n        } else if (wWidth > 1000) {\n            columns = 25;\n        } else {\n            columns = 10;\n        }\n\n        rows = Math.floor(columns / ratio);\n\n        this.setState({\n            calculatedCells: true,\n            rows,\n            columns,\n            squareWidth: wWidth / columns,\n            squareHeight: (wHeight / rows)\n        });\n    }\n\n    instructionsConfirmHandler() {\n        if ($('#dontShowCheckbox').is(':checked')) {\n            localStorage.setItem('skipInstructions', true);\n        }\n\n        this.setState({showModal: false});\n    }\n\n    render() {\n        let modal = this.state.showModal ? (\n            <div className={styles.InstructionsModalWrapper}>\n                <div className={styles.InstructionsModal}>\n                    <div style={{marginBottom: '15px', fontSize: '24px'}}>Instructions</div>\n                    <div>1. Click anywhere on the grid to create a starting position</div>\n                    <div>2. Click anywhere on the grid to create a ending position</div>\n                    <div>3. Optionally click (or drag) any additional squares to create wall squares</div>\n                    <div>4. Select algorith on the menu on the right</div>\n                    <div>5. Click start to begin the search</div>\n                    <div style={{marginTop: '15px', fontSize: '14px', color: '#333'}}>\n                        <input type=\"checkbox\" id=\"dontShowCheckbox\"/>Don't show this again\n                    </div>\n                    <button style={{marginTop: '15px'}} onClick={this.instructionsConfirmHandler.bind(this)}>Okay</button>\n                </div>\n            </div>\n        ) : null;\n\n        return(\n            <div>\n                { modal }\n                {\n                    this.state.calculatedCells ?\n                    (<Grid rows={this.state.rows} columns={this.state.columns} squareWidth={this.state.squareWidth} squareHeight={this.state.squareHeight}/>) :\n                    <div>Calculating best size</div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default wrapper;\n","import React from 'react';\nimport './App.css';\nimport Wrapper from './Components/Wrapper/Wrapper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}